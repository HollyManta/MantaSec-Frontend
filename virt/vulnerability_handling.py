import security_functions

## swap 0a0a to a html break-line
def r2br(output):
    output = output.replace("\n\n","<br>")
    return output

## A function to check if a vulnerability should be dispalyed or skipped
def skipVuln(name):
    ## TODO: Move this into the DB
    skipMe = [
                'Ethernet MAC Addresses',
                'Traceroute Information',
                'Device Type',
                'Service Detection',
                'VMware ESX/GSX Server detection',
                'Nessus Scan Information',
                'Local Checks Not Enabled (info)',
                'TCP/IP Timestamps Supported',
                'OS Identification',
                'Microsoft Windows SMB Service Detection',
                'OS Identification and Installed Software Enumeration over SSH v2 (Using New SSH Library)',
                'Authenticated Check : OS Name and Installed Package Enumeration',
                'Common Platform Enumeration (CPE)',
                'Microsoft Windows SMB2 Dialects Supported (remote check)',
                'Microsoft Windows SMB Versions Supported (remote check)',
                'Microsoft Windows NTLMSSP Authentication Request Remote Network Name Disclosure',
                'Windows NetBIOS / SMB Remote Host Information Disclosure',
                'DCE Services Enumeration',
                'SSL Root Certification Authority Certificate Information',
                'SSL Certificate Information',
                'SSL / TLS Versions Supported',
                'HyperText Transfer Protocol (HTTP) Information',
                'Nessus SYN scanner',
                'SSL Certificate Expiry - Future Expiry',
                'OpenSSL Detection',
                'Additional DNS Hostnames',
                'Apache HTTP Server Version',
                'Web Server No 404 Error Code Check',
                'SSL Cipher Suites Supported',
                'Web Server robots.txt Information Disclosure',
                'HTTP Server Type and Version',
                'DHCP Server Detection',
                'SSL Certificate Cannot Be Trusted',
                'Flash Player Detection',
                'Microsoft .NET Security Rollup Enumeration',
                'Microsoft .NET Framework Detection',
                'Microsoft Internet Explorer Version Detection',
                'Microsoft Windows Time Zone Information',
                'Ethernet Card Manufacturer Detection'
             ]

    if name in skipMe:
        return True
    else:
        return False

## TODO - what are the expected inputs?
def addVuln(vulnlist, name, affected, description, risk):
    riskColors =    {
                    "Critical":"critical",
                    "High":"high",
                    "Medium":"medium",
                    "Low":"low",
                    "None":"info"
                    }

    vulnOrder = ["Critical", "High", "Medium", "Low", "None"]
    
    affected = str.join(", ", affected)

    ## TODO - turn this into a template
    vulnlist += '<div class="row padded-top-five">'
    vulnlist += '<div class="widget-one">'
    
    ## Check if the issue is an aggregated one
    if isinstance(description, str):
        ## The issue is not aggregated; write so don't draw a box around the group
        vulnlist += '<div class="widget vuln-none-widget">'
        vulnlist += '<div class="bg-' + riskColors[risk] + ' white-text vuln-summary">' + risk + '</div>&nbsp;&nbsp;&nbsp;&nbsp;'
        vulnlist += '<p class="inline-block">' + security_functions.entityEncode(name) + '</p>'
    else:
        ## The issue is aggregated; loop over the grouped issues
        vulnlist += '<div class="widget vuln-' + security_functions.cleanRisk("aggregate") + '-widget">'
        vulnlist += '<p>' + security_functions.entityEncode(name) + '</p>'
        for rating in vulnOrder:
            for issue in description:
                if issue["risk"] == rating:
                    vulnlist += '<p class="vuln-desc">'
                    vulnlist += '<div class="bg-' + riskColors[issue["risk"]] + ' white-text vuln-summary">' + issue["risk"] + '</div>&nbsp;&nbsp;&nbsp;&nbsp;'
                    vulnlist += security_functions.entityEncode(issue["name"]) + '</span></p>'
                    ## TODO - why is this a list but when not aggregated it is not?
                    subAffected = str.join(", ", issue["affected"])

    vulnlist += '</div></div></div>'
    return vulnlist

def orderVulns(vulns):
    ## TODO update "Aggregated" to the highest rating before adding here
    vulnOrder = ["Aggregated", "Critical", "High", "Medium", "Low", "None"]
    vulnlist = ""

    for rating in vulnOrder:
        for vuln in vulns:
            if vuln["risk"] == rating:
                if not skipVuln(vuln["name"]):
                    vulnlist = addVuln(vulnlist, vuln["name"], vuln["affected"], vuln["description"], vuln["risk"])

    return vulnlist


    if __name__ == "__main__":
        ## TODO - write tests for these functions
        pass